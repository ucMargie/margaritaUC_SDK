import { UserCountryData, UserSessionData } from './index.legacy';
export interface IntMap<T> {
    [id: string]: T;
}
/** All the different UI layers */
export declare const enum UI_LAYER {
    FIRST_LAYER = 0,
    NONE = 1,
    PRIVACY_BUTTON = 2,
    SECOND_LAYER = 3
}
/** All the different UI variants  */
export declare const enum UI_VARIANT {
    CCPA = 0,
    DEFAULT = 1,
    TCF = 2
}
/** The init() return values, that determine what variant and layer should be shown */
export interface InitialUIValues {
    ampEnabled: boolean;
    initialLayer: UI_LAYER;
    variant: UI_VARIANT;
}
export interface UcDomains {
    aggregator: string;
    app: string;
    cdn: string;
    consents: string;
    crossDomainConsentSharingIFrame: string;
    graphql: string;
    trackingEvent: string;
}
/** Additional options you can pass to the constructor */
export interface InitOptions {
    /** This option is responsible of enabling AMP */
    ampEnabled?: boolean;
    /** Block push to the data layer */
    blockDataLayerPush?: boolean;
    /** User's generated controllerId. NOTE: Always use a controllerId provided by the SDK. */
    controllerId?: string;
    /**
     * Indicate if the TCF stub will be enabled on on load time. We can not wait for this information to come from the
     * settings, as by the TCF guidelines the __tcfapi need to be exposed from the very start.
     */
    createTcfApiStub?: boolean;
    /** When disabled, analytics will not track ui events */
    disableTracking?: boolean;
    /** When enabled, only servers with EU IPs are used (including CDN) */
    euMode?: boolean;
    /** Enforce a certain initial language for the user (default: user's browser language) */
    language?: string;
    /** Enforce consents not being saved on Usercentrics server, only using localstorage for the effect */
    disableServerConsents?: boolean;
    /** Enforce the preload of the services information on init */
    prefetchServices?: boolean;
    /** Ruleset id which points to an existing geolocation config settingsIds mapping */
    rulesetId?: string;
    /** When enable, we use sandbox API only */
    sandboxEnv?: boolean;
    /** Optional string, which is added to all settings GET requests, allowing instant cache-busting */
    settingsCache?: string;
    /** Store service id to name mapping */
    storeServiceIdToNameMapping?: boolean | false;
    /** Optional boolean, this will force InitialUIValues initialLayer to be UI_LAYER.PRIVACY_BUTTON OR UI_LAYER.NONE */
    suppressCmpDisplay?: boolean;
    /** Optional boolean, if true browser SDK will use the config map Id to fetch the settings id depending on user's geolocation */
    useRulesetId?: boolean;
    /** Optional userCountry data to simulate user location */
    userCountryData?: UserCountryData;
    /** Optional User Session data to be restored on init */
    userSessionData?: UserSessionData | null;
    useOnlySettingsV2?: boolean;
    /** Lock into a specific Usercentrics settings version (default: latest) */
    version?: string;
}
