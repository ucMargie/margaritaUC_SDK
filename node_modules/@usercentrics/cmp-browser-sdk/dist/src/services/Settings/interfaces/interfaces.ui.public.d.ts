import { BUTTON_ALIGNMENT, FIRST_LAYER_VARIANT, SECOND_LAYER_SIDE, SECOND_LAYER_VARIANT, THEME } from '../../SettingsV2/enums';
import { BaseButtons, BaseFirstLayer, BaseSecondLayer, ButtonCustomization, DefaultButtonProps, FirstLayerCustomization, FontCustomization, ToggleCustomization } from './interfaces.ui';
import { DataDistribution, Language, ProcessingCompany, URLs } from '../../SettingsV2/interfaces';
import { DeviceStorage, ServiceLegalBasis } from '../../Api/interfaces';
import { LogoCustomization } from '../../SettingsV2/UI/interfaces';
export interface ColorCustomization {
    acceptBtn: ButtonCustomization;
    accentColor: string;
    denyButton: ButtonCustomization;
    layerBackground: string;
    linkFontColor: string;
    linkIconColor: string;
    moreBtn: ButtonCustomization;
    overlayColor: string;
    primary: string;
    saveButton: ButtonCustomization;
    secondLayerTab: string | null;
    textFontColor: string;
}
export interface Customization {
    button: {
        alignment: BUTTON_ALIGNMENT;
        borderRadius: string;
    };
    color: ColorCustomization;
    firstLayer: FirstLayerCustomization;
    font: FontCustomization;
    layer: {
        borderRadius: string;
    };
    logo: LogoCustomization;
    overlay: {
        opacity: number;
    };
    privacyButton: {
        backgroundColor: string | null;
        desktopSize: number | null;
        iconColor: string | null;
        mobileSize: number | null;
    };
    theme: THEME;
    toggle: {
        active: ToggleCustomization;
        disabled: ToggleCustomization;
        inactive: ToggleCustomization;
    };
    useBackgroundShadow: boolean;
}
export interface ExtendedService {
    cookieMaxAgeSeconds: number | null;
    cookieRefresh: boolean | null;
    dataCollected: string[];
    dataDistribution: DataDistribution | null;
    dataProtectionOfficer: string | null;
    dataPurposes: string[];
    dataRecipients: string[];
    description: string | null;
    deviceStorage: DeviceStorage | null;
    deviceStorageDisclosureUrl: string | null;
    language: Language | null;
    legalBasis: ServiceLegalBasis[];
    processingCompany: ProcessingCompany | null;
    retentionPeriodDescription: string | null;
    technologiesUsed: string[];
    urls: URLs | null;
    usesCookies: boolean | null;
    usesNonCookieAccess: boolean | null;
}
export interface CcpaButtons extends BaseButtons, ShowSecondLayerButton {
    optOutNotice: {
        isHidden: boolean;
        label: string;
    };
}
export interface CcpaFirstLayer extends BaseFirstLayer {
    description: {
        default: string;
        short: string;
        showShortDescriptionOnMobile: boolean;
    };
    isLanguageSelectorEnabled: boolean;
    variant: FIRST_LAYER_VARIANT;
}
export interface CcpaSecondLayer extends BaseSecondLayer {
    isLanguageSelectorEnabled: boolean;
    side: SECOND_LAYER_SIDE;
    tabs: {
        categories: {
            isEnabled: boolean;
            label: string;
        };
        services: {
            isEnabled: boolean;
            label: string;
        };
    };
    variant: SECOND_LAYER_VARIANT;
}
export interface DefaultUISecondLayer extends BaseSecondLayer {
    hideButtonDeny: boolean;
    isLanguageSelectorEnabled: boolean;
    hideTogglesForServices: boolean;
    side: SECOND_LAYER_SIDE;
    tabs: {
        categories: {
            /** Currently non-customizable. Value set as: true */
            isEnabled: boolean;
            label: string;
        };
        services: {
            /** Currently non-customizable. Value set as: true */
            isEnabled: boolean;
            /** Currently non-customizable. Value set as: "Services" (non-translated) */
            label: string;
        };
    };
    variant: SECOND_LAYER_VARIANT;
}
export interface DefaultUIFirstLayer extends BaseFirstLayer {
    description: {
        default: string;
        short: string;
        showShortDescriptionOnMobile: boolean;
    };
    isLanguageSelectorEnabled: boolean;
    /** Currently non-customizable. Value set as: FIRST_LAYER_VARIANT.BANNER */
    variant: FIRST_LAYER_VARIANT;
}
export interface DefaultUIButtons {
    acceptAll: DefaultButtonProps;
    denyAll: DefaultButtonProps;
}
export interface ShowSecondLayerButton {
    showSecondLayer: {
        isEnabled: boolean;
        label: string;
        url: string | null;
    };
}
export interface DefaultTCFGeneralLabels {
    features: string;
    iabVendors: string;
    nonIabPurposes: string;
    nonIabVendors: string;
    purposes: string;
}
