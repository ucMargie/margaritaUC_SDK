import { CONSENT_ACTION, CONSENT_TYPE } from '../../..';
import { ConsentHistory } from '../../DataFacade/interfaces';
import { Consents } from '../../Api/interfaces/interfaces';
export interface LatestConsentData {
    consentAction: CONSENT_ACTION;
    consentType: CONSENT_TYPE;
    settingVersion: string;
    timestamp: number;
}
export interface NewStorageService {
    history: number[];
    id: string;
    processorId: string;
}
export interface NewStorageSettings {
    controllerId: string;
    id: string;
    language: string;
    latestConsentData?: LatestConsentData;
    serviceHistoryTimestamp: number[];
    services: NewStorageService[];
    version: number;
}
export interface StorageCcpa {
    timestamp: number;
    ccpaString: string;
}
export interface StorageConsentsBuffer {
    consents: Consents;
    timestamp: number;
}
export interface StorageSettings {
    controllerId: string;
    id: string;
    language: string;
    services: StorageService[];
    version: string;
}
export interface StorageService {
    history: ConsentHistory[];
    id: string;
    processorId: string;
    status: boolean;
}
export interface StorageTCF {
    tcString: string;
    timestamp: number;
    vendors: (number | number[])[][];
    vendorsDisclosed?: number[];
}
export interface StorageTCFVendorsDisclosed {
    [key: string]: boolean;
}
