import { CoreJsonResponse, DpsJsonResponse, LegacyHashService, LegacySettings } from '../interfaces';
import { StorageTCF } from '../../Storage/interfaces';
import { UcDomains } from '../../../interfaces';
import { UserConsentResponse } from '../interfaces/interfaces';
import { UserCountryResponse } from '../../Location/interfaces';
export default class Api {
    private static instance;
    private jsonFileLanguage;
    private jsonFileVersion;
    private settingsId;
    private useEuCdn;
    private disableServerConsents;
    static getInstance(): Api;
    static resetInstance(): void;
    resetAggregatedServicesCache(): void;
    resetTranslationsCache(): void;
    getJsonFileLanguage(): string;
    getJsonFileVersion(): string;
    getSettingsId(): string;
    getRulesetId(): string;
    getDisableServerConsents(): boolean;
    setJsonFileLanguage(jsonFileLanguage: string): void;
    setJsonFileVersion(jsonFileVersion: string): void;
    setDomains(useSandbox: boolean, domains?: UcDomains): void;
    setSettingsId(settingsId: string): void;
    setEuMode(activate: boolean): void;
    setDisableServerConsents(disableServerConsents: boolean): void;
    isEuMode(): boolean;
    fetchAggregatedServices(): Promise<LegacyHashService[]>;
    fetchAvailableLanguages(): Promise<string[]>;
    fetchTranslations(): Promise<string[]>;
    fetchCoreJson(): Promise<CoreJsonResponse>;
    fetchDpsJson(): Promise<DpsJsonResponse>;
    fetchSettingsJson(): Promise<LegacySettings>;
    fetchUserCountry(): Promise<UserCountryResponse>;
    fetchUserTcfData(): Promise<StorageTCF>;
    fetchUserConsents(): Promise<UserConsentResponse[]>;
    saveConsents(): Promise<Record<string, unknown>[]>;
    saveConsentsV2(): Promise<void>;
    saveTCFConsents(): Promise<Record<string, unknown>[]>;
    saveConsentsFromBuffer(): void;
}
