import { CONSENT_ACTION, CONSENT_TYPE } from '../../DataFacade/enums';
import { DisclosureType } from '../../Api/interfaces';
import { FIRST_LAYER_VARIANT } from '../enums';
import { Service } from '../interfaces';
export declare const nonEssentialCategories: {
    categorySlug: string;
    consent: {
        history: {
            action: CONSENT_ACTION;
            language: string;
            status: boolean;
            timestamp: number;
            type: CONSENT_TYPE;
            versions: {
                application: string;
                service: string;
                settings: string;
            };
        }[];
        status: boolean;
    };
    cookieMaxAgeSeconds: number;
    cookieRefresh: null;
    dataCollected: string[];
    dataDistribution: {
        processingLocation: string;
        thirdPartyCountries: string;
    };
    dataProtectionOfficer: string;
    dataPurposes: string[];
    dataRecipients: string[];
    description: string;
    deviceStorage: {
        disclosures: {
            description: string;
            domain: string;
            identifier: string;
            maxAgeSeconds: number;
            name: string;
            type: DisclosureType;
        }[];
    };
    deviceStorageDisclosureUrl: string;
    id: string;
    isEssential: boolean;
    isHidden: boolean;
    label: string;
    language: {
        available: string[];
        selected: string;
    };
    legalBasis: string[];
    name: string;
    processingCompany: {
        address: string;
        dataProtectionOfficer: string;
        name: string;
    };
    processorId: string;
    retentionPeriodDescription: string;
    services: {
        categorySlug: string;
        consent: {
            history: never[];
            status: boolean;
        };
        cookieMaxAgeSeconds: null;
        cookieRefresh: boolean;
        dataCollected: string[];
        dataDistribution: {
            processingLocation: string;
            thirdPartyCountries: string;
        };
        dataProtectionOfficer: string;
        dataPurposes: string[];
        dataRecipients: string[];
        description: string;
        deviceStorage: null;
        deviceStorageDisclosureUrl: null;
        id: string;
        isEssential: boolean;
        isHidden: boolean;
        language: {
            available: string[];
            selected: string;
        };
        legalBasis: string[];
        name: string;
        processingCompany: {
            address: string;
            dataProtectionOfficer: string;
            name: string;
        };
        processorId: string;
        retentionPeriodDescription: string;
        subServices: never[];
        technologiesUsed: string[];
        urls: {
            cookiePolicy: string;
            dataProcessingAgreement: string;
            optOut: string;
            privacyPolicy: string;
        };
        usesCookies: boolean;
        usesNonCookieAccess: boolean;
        version: string;
        fetchSubServices: () => Promise<Service[]>;
        subServicesLength: number;
    }[];
    slug: string;
    subServices: never[];
    subServicesLength: number;
    technologiesUsed: string[];
    urls: {
        cookiePolicy: string;
        dataProcessingAgreement: string;
        optOut: string;
        privacyPolicy: string;
    };
    usesCookies: null;
    usesNonCookieAccess: null;
    version: string;
}[];
export declare const settings: {
    categories: {
        description: string;
        isEssential: boolean;
        isHidden: boolean;
        label: string;
        services: {
            categorySlug: string;
            consent: {
                history: never[];
                status: boolean;
            };
            cookieMaxAgeSeconds: null;
            cookieRefresh: boolean;
            dataCollected: string[];
            dataDistribution: {
                processingLocation: string;
                thirdPartyCountries: string;
            };
            dataProtectionOfficer: string;
            dataPurposes: string[];
            dataRecipients: string[];
            description: string;
            deviceStorage: null;
            deviceStorageDisclosureUrl: null;
            id: string;
            isEssential: boolean;
            isHidden: boolean;
            language: {
                available: string[];
                selected: string;
            };
            legalBasis: string[];
            name: string;
            processingCompany: {
                address: string;
                dataProtectionOfficer: string;
                name: string;
            };
            processorId: string;
            retentionPeriodDescription: string;
            subServices: never[];
            technologiesUsed: string[];
            urls: {
                cookiePolicy: string;
                dataProcessingAgreement: string;
                optOut: string;
                privacyPolicy: string;
            };
            usesCookies: boolean;
            usesNonCookieAccess: boolean;
            version: string;
            fetchSubServices: () => Promise<Service[]>;
            subServicesLength: number;
        }[];
        slug: string;
    }[];
    ccpa: {
        appFirstLayerDescription: string;
        btnMoreInfo: string;
        btnSave: string;
        firstLayerDescription: string;
        firstLayerHideLanguageSwitch: boolean;
        firstLayerMobileDescription: string;
        firstLayerMobileDescriptionIsActive: boolean;
        firstLayerTitle: string;
        firstLayerVariant: string;
        iabAgreementExists: boolean;
        isActive: boolean;
        optOutNoticeLabel: string;
        region: string;
        reshowAfterDays: number;
        reshowCMP: boolean;
        secondLayerDescription: string;
        secondLayerHideLanguageSwitch: boolean;
        secondLayerTitle: string;
        secondLayerVariant: string;
        showOnPageLoad: boolean;
    };
    controllerId: string;
    dataExchangeSettings: {
        names: string[];
        type: number;
    }[];
    id: string;
    isCcpaEnabled: boolean;
    isCrossDomainEnabled: boolean;
    isTcfEnabled: boolean;
    tcf: import("../Data/TcfData").default;
    ui: {
        buttons: {
            acceptAll: {
                label: string;
            };
            denyAll: {
                isEnabled: boolean;
                label: string;
            };
            save: {
                label: string;
            };
            showSecondLayer: {
                isEnabled: boolean;
                label: string;
                url: string;
            };
        };
        firstLayer: {
            description: {
                default: string;
                short: string;
            };
            isCategoryTogglesEnabled: boolean;
            variant: FIRST_LAYER_VARIANT;
        };
        language: {
            selected: string;
        };
    };
    version: string;
};
