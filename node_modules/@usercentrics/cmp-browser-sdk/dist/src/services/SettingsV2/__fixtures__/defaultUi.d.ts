import { FIRST_LAYER_VARIANT, SECOND_LAYER_SIDE, SECOND_LAYER_VARIANT } from '../enums';
export declare const defaultUi: {
    ariaLabels: {
        acceptAllButton: string;
        ccpaButton: string;
        ccpaMoreInformation: string;
        closeButton: string;
        collapse: string;
        cookiePolicyButton: string;
        copyControllerId: string;
        denyAllButton: string;
        expand: string;
        fullscreenButton: string;
        imprintButton: string;
        languageSelector: string;
        privacyButton: string;
        privacyPolicyButton: string;
        saveButton: string;
        serviceInCategoryDetails: string;
        servicesInCategory: string;
        tabButton: string;
        usercentricsCard: string;
        usercentricsCMPButtons: string;
        usercentricsCMPContent: string;
        usercentricsCMPHeader: string;
        usercentricsCMPUI: string;
        usercentricsList: string;
        vendorConsentToggle: string;
        vendorDetailedStorageInformation: string;
        vendorLegIntToggle: string;
    };
    buttons: {
        acceptAll: {
            label: string;
        };
        denyAll: {
            isEnabled: boolean;
            label: string;
        };
        save: {
            label: string;
        };
        showSecondLayer: {
            isEnabled: boolean;
            label: string;
            url: null;
        };
    };
    cnil: {
        denyLabel: string;
        showDenyLink: boolean;
    };
    customCss: null;
    customization: {
        button: {
            alignment: import("../enums").BUTTON_ALIGNMENT;
            borderRadius: string;
        };
        color: {
            acceptBtn: {
                backgroundColor: string;
                textColor: string;
            };
            denyButton: {
                backgroundColor: string;
                textColor: string;
            };
            layerBackground: string;
            linkFontColor: string;
            linkIconColor: string;
            moreBtn: {
                backgroundColor: string;
                textColor: string;
            };
            overlayColor: string;
            primary: string;
            saveButton: {
                backgroundColor: string;
                textColor: string;
            };
            secondLayerTab: string;
            textFontColor: string;
        };
        firstLayer: {
            secondLayerTrigger: import("../enums").SECOND_LAYER_TRIGGER;
        };
        font: {
            family: string;
            size: number;
        };
        layer: {
            borderRadius: string;
        };
        logo: {
            altTag: null;
            position: string;
            url: null;
        };
        overlay: {
            opacity: number;
        };
        privacyButton: {
            backgroundColor: null;
            desktopSize: null;
            iconColor: null;
            mobileSize: null;
        };
        theme: number;
        toggle: {
            active: {
                backgroundColor: string;
                iconColor: string;
            };
            disabled: {
                backgroundColor: string;
                iconColor: string;
            };
            inactive: {
                backgroundColor: string;
                iconColor: string;
            };
        };
        useBackgroundShadow: boolean;
    };
    firstLayer: {
        description: {
            default: string;
            short: string;
            showShortDescriptionOnMobile: boolean;
        };
        hideButtonDeny: boolean;
        isCategoryTogglesEnabled: boolean;
        isLanguageSelectorEnabled: boolean;
        isOverlayEnabled: boolean;
        title: string;
        variant: FIRST_LAYER_VARIANT;
    };
    isEmbeddingsEnabled: boolean;
    labels: {
        cookieInformation: {
            anyDomain: string;
            cookieRefresh: string;
            cookieStorage: string;
            day: string;
            days: string;
            description: string;
            domain: string;
            duration: string;
            error: string;
            hour: string;
            hours: string;
            identifier: string;
            loading: string;
            maximumAge: string;
            minute: string;
            minutes: string;
            month: string;
            months: string;
            multipleDomains: string;
            name: string;
            no: string;
            nonCookieStorage: string;
            purposes: string;
            second: string;
            seconds: string;
            session: string;
            storedInformation: string;
            storedInformationDescription: string;
            title: string;
            titleDetailed: string;
            tryAgain: string;
            type: string;
            year: string;
            years: string;
            yes: string;
        };
        general: {
            back: string;
            consentGiven: string;
            consentNotGiven: string;
            consentType: string;
            controllerId: string;
            copy: string;
            date: string;
            decision: string;
            details: string;
            explicit: string;
            implicit: string;
            implicitNo: string;
            implicitYes: string;
            showLess: string;
            showMore: string;
            subservice: string;
            subservices: string;
            subservicesDescription: string;
        };
        service: {
            dataCollected: {
                description: string;
                title: string;
            };
            dataDistribution: {
                processingLocationDescription: string;
                processingLocationTitle: string;
                thirdPartyCountriesDescription: string;
                thirdPartyCountriesTitle: string;
            };
            dataProtectionOfficer: {
                description: string;
                title: string;
            };
            dataPurposes: {
                description: string;
                title: string;
            };
            dataRecipients: {
                description: string;
                title: string;
            };
            descriptionTitle: string;
            history: {
                description: null;
                title: string;
            };
            legalBasis: {
                description: string;
                title: string;
            };
            processingCompanyTitle: string;
            retentionPeriod: {
                description: string;
                title: string;
            };
            technologiesUsed: {
                description: string;
                title: string;
            };
            urls: {
                cookiePolicyTitle: string;
                optOutTitle: string;
                privacyPolicyTitle: string;
            };
        };
    };
    language: {
        available: string[];
        selected: string;
    };
    links: {
        cookiePolicy: {
            ariaLabel: string;
            label: string;
            url: null;
        };
        imprint: {
            ariaLabel: string;
            label: null;
            url: string;
        };
        privacyPolicy: {
            ariaLabel: string;
            label: string;
            url: string;
        };
    };
    poweredBy: {
        isEnabled: boolean;
        label: string;
        partnerUrl: null;
        partnerUrlLabel: null;
        url: string;
        urlLabel: string;
    };
    privacyButton: {
        iconUrl: null;
        isEnabled: boolean;
        position: string;
    };
    secondLayer: {
        description: string;
        hideButtonDeny: boolean;
        hideTogglesForServices: boolean;
        isLanguageSelectorEnabled: boolean;
        isOverlayEnabled: boolean;
        side: SECOND_LAYER_SIDE;
        tabs: {
            categories: {
                isEnabled: boolean;
                label: string;
            };
            services: {
                isEnabled: boolean;
                label: string;
            };
        };
        title: string;
        variant: SECOND_LAYER_VARIANT;
    };
    showCookieInformation: boolean;
};
