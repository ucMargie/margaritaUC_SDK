import { BaseCategoryData, BaseServiceData, CategoryData, ServiceData } from '../Data/interfaces';
import { CategoryLabels, ServiceLabels } from '../Labels/interfaces';
import { DATA_EXCHANGE_TYPE } from '../enums';
import { LegacyHashService } from '../../Api/interfaces';
export interface DataExchangeSetting {
    names: string[];
    type: DATA_EXCHANGE_TYPE;
}
export interface ServiceHashArrayObject {
    id: string;
    version: string;
}
export interface TCFChangedPurposes {
    purposes: number[];
    legitimateInterestPurposes: number[];
}
export interface ResurfaceOptions {
    onIABLegalBasisChanged: boolean;
    onVendorAdded: boolean;
    onPurposeChanged: boolean;
    onPeriodEnded: boolean;
}
export interface AggregatedServices {
    services: LegacyHashService[];
}
export interface BaseService extends BaseServiceData, ServiceLabels {
}
export interface Service extends ServiceData, ServiceLabels {
    subServices: Service[];
}
export interface BaseCategory extends BaseCategoryData, CategoryLabels {
    services: BaseService[];
}
export interface Category extends CategoryData, CategoryLabels {
    services: Service[];
}
export declare type Maybe<T> = T | null | undefined;
