import { BaseCategory, BaseService, Category, DataExchangeSetting, LogoPosition, Maybe, Service } from './interfaces';
import { BaseCategoryData, BaseServiceData, CategoryData, CcpaData, Data, DefaultData, ServiceData, TcfData } from './Data/interfaces';
import { CategoryLabels, CcpaLabels, DefaultLabels, Labels, TcfLabels } from './Labels/interfaces';
import { CcpaUI, DefaultUI, PrivacyButtonUI, TcfUI, UI } from './UI/interfaces';
import { VERSION } from './enums';
import { FIRST_LAYER_LOGO_POSITION, LegacyDataExchangeSetting, LegacySettings } from '../Api/interfaces';
import { LEGACY_VERSION } from '../Api/enums';
import ServiceLabels from './Labels/Common/ServiceLabels';
export declare const getSettingWithFallback: (newSetting: boolean | undefined | null, oldSetting: boolean) => boolean;
export declare const formatColor: (color: string | undefined) => string | null;
export declare const validateHexColor: (color: string | undefined | null) => boolean;
export declare const isFirstLayerOverlayEnabled: (settings: LegacySettings) => boolean;
export declare const isSecondLayerOverlayEnabled: (settings: LegacySettings) => boolean;
export declare const getPx: (value: number | string) => string;
export declare const mapLogoPosition: (legacyPosition?: FIRST_LAYER_LOGO_POSITION | undefined) => LogoPosition;
export declare const reduceDataExchangeSettings: (dataExchangeOnPage: LegacyDataExchangeSetting[]) => DataExchangeSetting[];
export declare const getShowFirstLayerOnVersionChange: (showInitialViewForVersionChange: LEGACY_VERSION[]) => VERSION[];
export declare const mergeServicesBaseWithLabels: (services: BaseServiceData[], servicesLabels: ServiceLabels[]) => BaseService[];
export declare const mergeServicesWithLabels: (services: ServiceData[], servicesLabels: ServiceLabels[]) => Service[];
export declare const mergeCategoriesBaseWithLabels: (categories: BaseCategoryData[], categoriesLabels: CategoryLabels[], servicesLabels: ServiceLabels[]) => BaseCategory[];
export declare const mergeCategoriesWithLabels: (categories: CategoryData[], categoriesLabels: CategoryLabels[], servicesLabels: ServiceLabels[]) => Category[];
export declare const isCcpaData: (data: Maybe<Data>) => data is CcpaData;
export declare const isTcfData: (data: Maybe<Data>) => data is TcfData;
export declare const isDefaultData: (data: Maybe<Data>) => data is DefaultData;
export declare const isCcpaLabels: (labels: Maybe<Labels>) => labels is CcpaLabels;
export declare const isTcfLabels: (labels: Maybe<Labels>) => labels is TcfLabels;
export declare const isDefaultLabels: (labels: Maybe<Labels>) => labels is DefaultLabels;
export declare const isCcpaUI: (ui: Maybe<UI>) => ui is CcpaUI;
export declare const isTcfUI: (ui: Maybe<UI>) => ui is TcfUI;
export declare const isDefaultUI: (ui: Maybe<UI>) => ui is DefaultUI;
export declare const isPrivacyButtonUI: (ui: Maybe<UI>) => ui is PrivacyButtonUI;
