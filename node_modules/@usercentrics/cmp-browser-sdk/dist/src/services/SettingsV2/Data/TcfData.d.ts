import { CoreTcf, DpsJsonResponse, LegacySettings } from '../../Api/interfaces';
import { DataTransferSettings } from '../../../modules/helpers';
import { EncodingOptions, TCModel } from '@iabtcf/core';
import { ResurfaceOptions, TCFChangedPurposes } from '../interfaces';
import { TCFData, TCFUserDecisions } from '../interfaces/TCF';
import { TCF_DECISION_UI_LAYER } from '../enums/TCF';
import DefaultData from './DefaultData';
import { TcfData as TcfSettingsData } from './interfaces';
declare class Tcf extends DefaultData implements TcfSettingsData {
    changedPurposes: TCFChangedPurposes;
    cmpId: number;
    cmpVersion: number;
    consensuScriptPath: string;
    consensuSubdomain: string;
    disabledSpecialFeatures: number[];
    gdprApplies: boolean;
    hideLegitimateInterestToggles: boolean;
    publisherCountryCode: string;
    purposeOneTreatment: boolean;
    resurfaceOptions: ResurfaceOptions;
    stackIds: number[];
    tcfv2HistoryDisabled: boolean;
    useGranularChoice: boolean;
    vendorIds: number[];
    vendorIdsOutsideEUList: number[];
    updateControllerId(value: string): void;
    private dataTransferSettings;
    private locationInstance;
    private botInstance;
    private previousStorage;
    private selectedVendorsIncludeNonDisclosed;
    private cmpApi;
    private tcModel;
    private tcfData;
    private vendors;
    private selectedLanguage;
    acceptAllDisclosed(fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    areAllPurposesAccepted(): boolean;
    areAllVendorsAccepted(): boolean;
    changeLanguage(language: string): Promise<void>;
    denyAllDisclosed(fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    getSelectedVendorsIncludeNonDisclosed(): boolean;
    getTcModel(): TCModel | null;
    getTCFData(): TCFData;
    /**
     * If GDPR applies is false, then GDPR applies is set to true in TC String.
     * If GDPR applies is true and user is inside EU, set it to true in TC String.
     * If GDPR applies is true and user is outside EU, set it to false in TC String.
     * (refs EUD-487)
     * */
    getGdprApplies(): Promise<boolean>;
    getTCString(encodingOptions?: EncodingOptions): string;
    getTCFDisclosedVendorsSegmentString(): string;
    init(): Promise<void>;
    setUIAsClosed(): Promise<void>;
    setUIAsOpen(): Promise<void>;
    shouldResurfaceUI(): boolean;
    updateChoices(decisions: TCFUserDecisions, fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    resetTcf(): void;
    private applyPurposeRestrictions;
    private cmpApiUpdate;
    private getVendors;
    initTCModel(tcString: string, isEuMode: boolean): Promise<void>;
    private resetGVLWithLanguage;
    private resetTcfData;
    private setSelectedVendorsIncludeNonDisclosed;
    private savePurposes;
    private saveSpecialFeatures;
    private saveVendors;
    private setVendors;
    private getTcfData;
    injectTCString(tcString: string): Promise<boolean>;
    private saveTCFData;
    private updateTCString;
    constructor(legacySettings: LegacySettings, coreTcf: CoreTcf, dpsJson: DpsJsonResponse, dataTransferSettings: DataTransferSettings, controllerId: string, language: string);
}
export default Tcf;
